---
layout:     post
title:      "mysql索引"
subtitle:   " \"innodb索引\""
date:       2019-12-21 12:00:00
author:     "Jetman"
header-img: "img/in-post/mysql/mysql-three.jpeg"
catalog: true
tags:
    - mysql
    - 技术
    - 总结
---


#### 4. 索引
##### 索引常见模型:bTree,hash,有序数组
  - a. hash:数据结构参考jdk hashMap.
    优点:单个查找非常快.
    缺点:不支持区间查找,区间查找需要全表扫描.
  - b. 有序数组
    优点:单个查找和区间查找非常快
    缺点:插入数组需要移动后面的数组,效率非常差.
  - c. bTree:数据结构是N叉索引树
  > 以InnoDB的一个整数字段索引为例，这个N差不多是1200。这棵树高是4的时候，就可以存1200的3次方个值，这已经17亿了。考虑到树根的数据块总是在内存中的，一个10亿行的表上一个整数字段的索引，查找一个值最多只需要访问3次磁盘。其实，树的第二层也有很大概率在内存中，那么访问磁盘的平均次数就更少了。

##### InnoDB就是用BTree.
  至少有一棵树:以主键索引(聚簇索引)建立的.没有主键索引会默认一个主键索引
  也有非主键索引(二级索引)建立的.
  主键索引叶子结点包含所有字段记录.二级索引叶子结点只有主键索引数据,需要回表查询.
  
##### 名词解释
  - 页分裂:插入数据,当一个结点的数据页已经满了,就会申请新的数据页,然后挪动部分数据过去
  - 页合并:删除数据,当数据页数据量过少,就会叶合并.
  - 回表:二级索引查到会主键索引查询数据
  - 覆盖索引,select id from T where index = 1; 根据二级索引查询,但只需要主键索引数据,不需要回表
  - 最左前缀原则：B+Tree这种索引结构，可以利用索引的"最左前缀"来定位记录
只要满足最左前缀，就可以利用索引来加速检索。
最左前缀可以是联合索引的最左N个字段，也可以是字符串索引的最左M个字符
第一原则是：如果通过调整顺序，可以少维护一个索引，那么这个顺序往往就是需要优先考虑采用的。
  - 索引下推：在MySQL5.6之前，只能从根据最左前缀查询到ID开始一个个回表。到主键索引上找出数据行，再对比字段值。
MySQL5.6引入的索引下推优化，可以在索引遍历过程中，对索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表次数。